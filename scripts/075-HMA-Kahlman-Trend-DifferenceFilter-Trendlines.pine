//@version=4
study("HMA-Kahlman Trend, DifferenceFilter & Trendlines", '', true, precision=2)

// compilation: capissimo

// This script features three modules:
// - Trendlines module (by Joris Duyck), 
// - Winsorizing submodule using difference-based filtering (NEW).   
// - HMA-Kahlman Trend module. 
// The Trendlines module produces crossovers predictive of the next local trend. 
// The Winsorizing submodule filters signals by a volume level, eliminating the ones with the volume below a threshold.
// This module substitutes the previous 'low-level' filtering implementation. 
// This time it filters based on difference between the scaled volume and its moving average.

//*** HMA-Kahlman Trend module 
price  = input(hl2,  "Price Data")
hkmod  = input(true, "===HMA-Kahlman Trend Module===")
length = input(22,   "Lookback Window", minval=2)
k      = input(true, "Use Kahlman?")
gain   = input(.7,   "Gain", minval=.0001, step=.01)
labels = input(true, "Show Labels?")
rep    = input(true, "Repainting?")

hma(x, len) => wma((2 * wma(x, len / 2)) - wma(x, len), round(sqrt(len)))
    
hma3(x, len) => p = len/2, wma(wma(x, p/3)*3 - wma(x, p/2) - wma(x, p), p)

kahlman(x, g) =>
    kf = 0.0
    dk = x - nz(kf[1], x)
    smooth = nz(kf[1],x)+dk*sqrt(g*2)
    velo = 0.0
    velo := nz(velo[1],0) + (g*dk)
    kf := smooth+velo
    
//*** Winsorizing submodule 
wsmod  = input(true,       "===Winsorizing Module===")  
method = input("High-Low", "Filtering Method", options=["Volume","High-Low"])
p      = input(20,         "Clipping Lookback Window", minval=2)
inc    = input(1.5,        "Threshold Increment (1.0== none)", minval=1., step=.01)

C = rep ? close : close[1], pri = rep ? price : price[1], V = rep ? volume : volume[1] // repainting

scaler(x, p) => (x - lowest(x, p)) / (highest(x, p) - lowest(x, p))

isabove(p, m) => // Difference-based filtering
    if not wsmod
        true
    else 
        diff = m=="Volume" ? scaler(volume, p) : scaler(high-low, p)
        ma  = sma(diff, p) * inc
        diff - ma > 0

// Main
a     = k ? kahlman(hma(price, length), gain) : hma(price, length)
b     = k ? kahlman(hma3(C, length), gain) : hma3(C, length)
c     = b > a ? color.lime : color.red
long  = b > a and b[1] < a[1] and isabove(p, method)  // use submodule
short = a > b and a[1] < b[1] and isabove(p, method)  

fill(plot(a, color=c, linewidth=1, transp=75), plot(b, color=c, linewidth=1, transp=75), color=c, transp=55)
plotshape(labels and long  ? a : na, location=location.belowbar, style=shape.labelup, color=color.green, size=size.tiny, text="B", textcolor=color.white, transp=0)
plotshape(labels and short ? a : na, location=location.abovebar, style=shape.labeldown, color=color.red, size=size.tiny, text="S", textcolor=color.white, transp=0)

alertcondition(long,  title='Buy',  message='go long')
alertcondition(short, title='Sell', message='go short') 

//*** Trendlines module, see https://www.tradingview.com/script/mpeEgn5J-Trendlines-JD/
tlmod = input(true, "===Trendlines Module===")
l1    = input(2,    "Pivots Lookback Window", minval=1)

trendline(input_function, delay, only_up) => // Calculate line coordinates (Ax,Ay) - (Bx,By)
    var int Ax = 0, var int Bx = 0, var float By = 0.0, var float slope = 0.0
    Ay = fixnan(input_function)
    if change(Ay)!=0
        Ax := time[delay], By:= Ay[1], Bx := Ax[1]
        slope := ((Ay-By)/(Ax-Bx))
    else
        Ax := Ax[1], Bx := Bx[1], By := By[1]

    var line trendline=na, var int Axbis=0, var float Aybis=0.0, var bool xtend=true
    extension_time = 0
    Axbis := Ax + extension_time
    Aybis := (Ay + extension_time*slope)
    if tlmod and change(Ay)!=0
        line_color = slope*time<0?(only_up?na:color.red):(only_up?color.lime:na)
        if not na(line_color)
            trendline = line.new(Bx,By,Axbis, Aybis, xloc.bar_time, extend=xtend?extend.right:extend.none, color=line_color, style=line.style_dotted, width=1)
            line.delete(trendline[1])
    slope
	
pivot(len) =>	
    high_point = pivothigh(high, len,len/2)
    low_point  = pivotlow(low, len,len/2)
    slope_high = trendline(high_point, len/2,false)
    slope_low  = trendline(low_point, len/2,true)
    [high_point, low_point, slope_high, slope_low]

// Main
[high_point1, low_point1, slope_high1, slope_low1] = pivot(l1) 

color_high1 = slope_high1 * time<0 ? color.red : na
color_low1  = slope_low1  * time>0 ? color.lime : na
plot(tlmod ? high_point1 : na, color=color_high1, offset=-l1/2, linewidth=2)
plot(tlmod ? low_point1  : na, color=color_low1, offset=-l1/2, linewidth=2)
