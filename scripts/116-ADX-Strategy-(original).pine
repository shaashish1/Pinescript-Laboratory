// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© capissimo

//@version=4
study("ADX Strategy (original)", '', true)

// ADX Strategy

// Description:

// 	Generates a long entry signal when the Average Directional Index (ADX)
// 	value is greater than the trendlevel and the close is greater than the filter
// 	value, and/or generates a short entry signal when the ADX value is greater than 
// 	the trendlevel and the close is less than the filter value.

// 	The Average Directional Index evaluates the strength of a current trend. 
// 	The ADX is an oscillator that fluctuates between 0 and 100. Values below 20 
// 	indicate a weak trend, values above 40 indicate a strong trend. The direction 
// 	of the trend is not measured by this indicator.

//-------------------- Inputs

ptype      = input('Close','Dataset',               options=['Open','High','Low','Close','HL2','OC2','OHL3','HLC3','OHLC4'])
reso       = input('',     'Resolution',            input.resolution)

lag        = input(20,     'ADX Lag |1..n|',        minval=1)
trendlevel = input(20,     'Trend Level |1..n|',    minval=1)
filterlag  = input(38,     'Filter Lag |1..n|',     minval=1)

ftype      = input('None', 'Filter Signals by',     options=['Volatility','Volume','Both','None'])
holding_p  = input(1,      'Holding Period |1..n|', minval=1)

//-------------------- System Variables

var int BUY  =  1
var int SELL = -1
var int HOLD =  0

//-------------------- Series

var int signal     = HOLD
var int hp_counter = 0

//-------------------- Custom Functions

volumeBreak(thres) =>  
    rsivol   = rsi(volume, 14)  
    osc      = hma(rsivol, 10)  
    osc > thres                     

volatilityBreak(volmin, volmax) => atr(volmin) > atr(volmax)

//-------------------- Logic

tbase   = (time - time[1]) / 1000
tcurr   = (timenow - time_close[1]) / 1000
barlife = tcurr / tbase

filter =   ftype=='Volatility' ? volatilityBreak(1, 10) 
         : ftype=='Volume'     ? volumeBreak(49) 
         : ftype=='Both'       ? volatilityBreak(1, 10) and volumeBreak(49)
         :                       true
         
dset   =   ptype=='Open'  ? open 
         : ptype=='High'  ? high 
         : ptype=='Low'   ? low 
         : ptype=='Close' ? close 
         : ptype=='OC2'   ? (open+close)/2 
         : ptype=='HL2'   ? hl2 
         : ptype=='OHL3'  ? (open+high+low)/3 
         : ptype=='HLC3'  ? hlc3 
         :                  ohlc4

dataset = security('', reso, dset)

[_, _, adx] = dmi(lag, lag)
filterval   = sma(dataset, filterlag)

signal := adx>trendlevel and dataset>filterval and filter ? BUY : adx>trendlevel and dataset<filterval and filter ? SELL : nz(signal[1])

changed = change(signal)

hp_counter := changed ? 0 : hp_counter + 1

startLongTrade  = changed and signal==BUY    
startShortTrade = changed and signal==SELL   
endLongTrade    = (changed and signal==SELL) or (signal==BUY  and hp_counter==holding_p and not changed) 
endShortTrade   = (changed and signal==BUY)  or (signal==SELL and hp_counter==holding_p and not changed) 

//-------------------- Visualization

plotshape(startLongTrade  ? low  : na, 'Buy',  shape.labelup,   location.belowbar, color.blue, 30, size=size.small)
plotshape(startShortTrade ? high : na, 'Sell', shape.labeldown, location.abovebar, color.red,  30, size=size.small)
plot(startLongTrade  ? low  : startShortTrade ? high : na, '', color.blue, 2, plot.style_stepline)

//-------------------- Notification

if changed and signal==BUY 
    alert('Buy Alert', alert.freq_once_per_bar)  // alert.freq_once_per_bar_close
if changed and signal==SELL 
    alert('Sell Alert', alert.freq_once_per_bar)
    
alertcondition(startLongTrade,  'Buy Alert',  'Go Long!')
alertcondition(startShortTrade, 'Sell Alert', 'Go Short!')

//-------------------- Backtest

show_info = input(false, '===Information===')
lot_size  = input(0.01,  'Lot Size', options=[0.01,0.1,0.2,0.3,0.5,1,2,3,5,10,20,30,50,100,1000]) 

bidask = open //-- (open+high+low)/3 is less optimistic

var float start_long_trade  = bidask  
var float long_trades       = 0.
var float start_short_trade = bidask  
var float short_trades      = 0.
var int   wins              = 0
var int   trade_count       = 0

if startLongTrade 
    start_long_trade := bidask 
if endLongTrade
    ldiff         = (bidask - start_long_trade)
    wins         := ldiff > 0 ? 1 : 0
    long_trades  := ldiff * lot_size   
    trade_count  := 1
if startShortTrade 
    start_short_trade := bidask
if endShortTrade
    sdiff         = (start_short_trade - bidask)
    wins         := sdiff > 0 ? 1 : 0
    short_trades := sdiff * lot_size 
    trade_count  := 1
    
cumreturn   = cum(long_trades) + cum(short_trades)  //-- cumulative return 
totaltrades = cum(trade_count)
totalwins   = cum(wins)  
totallosses = totaltrades - totalwins == 0 ? 1 : totaltrades - totalwins

//------------------- Information

var label lbl = na

info =  ptype
      + '\nCR='        + tostring(cumreturn,             '#.#') 
      + '\nTrades: '   + tostring(totaltrades,           '#')
      + '\nWin/Loss: ' + tostring(totalwins/totallosses, '#.##') 
      + '\nWinrate: '  + tostring(totalwins/totaltrades, '#.#%')       
      + '\nBar Time: ' + tostring(barlife,               '#.#%')

if show_info and barstate.islast  
    lbl := label.new(bar_index, ohlc4, info, xloc.bar_index, yloc.price, 
                     color.new(color.blue, 100), label.style_label_left, color.black, size.small, text.align_left)
    label.delete(lbl[1])
