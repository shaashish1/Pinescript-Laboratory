// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© capissimo

//@version=4
study('Aroon-based Strategy', '', true)

//-------------------- Inputs

lag       = input(9,     'Aroon Lag |1..n|',        minval=1)
HighLevel = input(85,    'Overbought Level |1..n|', minval=1)
LowLevel  = input(15,    'Oversold Level |1..n|',   minval=1)
ftype     = input('None','Filter Signals by',       options=['Volatility','Volume','Both','None'])
af        = input(1,     'Short ATR Lag |1..n|',    minval=1)
as        = input(10,    'Long ATR Lag |2..n|',     minval=2)
holding_p = input(9,     'Holding Period |1..n|',   minval=1)

//-------------------- System Variables

var int BUY       = -1
var int SELL      =  1
var int HOLD      =  0

//-------------------- Dynamic Arrays

var float Bulls    = 0.0
var float Bears    = 0.0
var int   signal   = HOLD
var int LastTrend  = HOLD

var int hp_counter = 0

//-------------------- Custom Functions

volumeBreak(thres) =>  
    rsivol   = rsi(volume, 14)  
    osc      = hma(rsivol, 10)  
    osc > thres                     

volatilityBreak(volmin, volmax) => atr(volmin) > atr(volmax)

//-------------------- Logic

filter =   ftype=='Volatility' ? volatilityBreak(af, as) 
         : ftype=='Volume'     ? volumeBreak(49) 
         : ftype=='Both'       ? volatilityBreak(af, as) and volumeBreak(49)
         :                       true

BULLS = 100 * (highestbars(high, lag+1) + lag) / lag
BEARS = 100 * (lowestbars(low, lag+1)   + lag) / lag
Range = 0.0

if BULLS>HighLevel and BEARS<LowLevel
    if LastTrend == SELL
        for count=0 to 10
            Range := abs(high[count]-low[count])
        Bulls = low-(Range*0.5/10)
    LastTrend := BUY

if BULLS<LowLevel and BEARS>HighLevel
    if LastTrend == BUY
        for count=0 to 10 
            Range := abs(high[count]-low[count])
        Bears = high+(Range*0.5/10)
    LastTrend := SELL

signal :=  change(LastTrend) and BULLS<LowLevel and BEARS>HighLevel and filter ? SELL 
         : change(LastTrend) and BULLS>HighLevel and BEARS<LowLevel and filter ? BUY 
         : nz(signal[1])

changed = change(signal)

hp_counter := changed ? 0 : hp_counter + 1

startLongTrade  = changed and signal==BUY    
startShortTrade = changed and signal==SELL   
endLongTrade    = (changed and signal==SELL) or (signal==BUY  and hp_counter==holding_p and not changed) 
endShortTrade   = (changed and signal==BUY)  or (signal==SELL and hp_counter==holding_p and not changed) 

//-------------------- Rendering

plotshape(startLongTrade,  'Buy',  shape.labelup,   location.belowbar, color.blue, 0, 0, '', color.white, size=size.small)
plotshape(startShortTrade, 'Sell', shape.labeldown, location.abovebar, color.red,  0, 0, '', color.white, size=size.small)
plot(endLongTrade         ? high : na, 'StopBuy',  color.blue, 2, plot.style_cross)
plot(endShortTrade        ? low  : na, 'StopSell', color.red,  2, plot.style_cross)

//-------------------- Alerting

if changed and signal==BUY 
    alert("Buy Alert", alert.freq_once_per_bar)  // alert.freq_once_per_bar_close
if changed and signal==SELL 
    alert("Sell Alert", alert.freq_once_per_bar)
    
alertcondition(startLongTrade,  "Buy Alert",  "Go Long!")
alertcondition(startShortTrade, "Sell Alert", "Go Short!") 

//-------------------- Backtesting

show_info = input(true, '===Information===')
lot_size  = input(0.01,  'Lot Size', options=[0.01,0.1,0.2,0.3,0.5,1,2,3,5,10,20,30,50,100,1000]) 

tbase   = (time - time[1]) / 1000
tcurr   = (timenow - time_close[1]) / 1000
barlife = tcurr / tbase

bidask  = (open+high+low)/3

var float start_long_trade  = bidask  
var float long_trades       = 0.
var float start_short_trade = bidask  
var float short_trades      = 0.
var int   wins              = 0
var int   trade_count       = 0

if startLongTrade 
    start_long_trade := bidask 
if endLongTrade
    ldiff         = (bidask - start_long_trade)
    wins         := ldiff > 0 ? 1 : 0
    long_trades  := ldiff * lot_size   
    trade_count  := 1
if startShortTrade 
    start_short_trade := bidask
if endShortTrade
    sdiff         = (start_short_trade - bidask)
    wins         := sdiff > 0 ? 1 : 0
    short_trades := sdiff * lot_size 
    trade_count  := 1
    
cumreturn   = cum(long_trades) + cum(short_trades)  //-- cumulative return 
totaltrades = cum(trade_count)
totalwins   = cum(wins)  
totallosses = totaltrades - totalwins == 0 ? 1 : totaltrades - totalwins

//------------------- Information

var label lbl = na

info =  'CR='          + tostring(cumreturn,             '#.#') 
      + '\nTrades: '   + tostring(totaltrades,           '#')
      + '\nWin/Loss: ' + tostring(totalwins/totallosses, '#.##') 
      + '\nWinrate: '  + tostring(totalwins/totaltrades, '#.#%')       
      + '\nBar Time: ' + tostring(barlife,               '#.#%')

if show_info and barstate.islast  
    lbl := label.new(bar_index, ohlc4, info, xloc.bar_index, yloc.price, 
                     color.new(color.blue, 100), label.style_label_left, color.black, size.small, text.align_left)
    label.delete(lbl[1])
