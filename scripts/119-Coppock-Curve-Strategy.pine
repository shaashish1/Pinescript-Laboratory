// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© capissimo

//@version=4
study('Coppock Curve Strategy', '', true)

//  Coppock Curve Strategy

//  Description:

// 	The Coppock Indicator is a long-term price momentum oscillator 
// 	which is used primarily to pinpoint major bottoms in the stock market.
// 	Crosses above the zero line indicate buying pressure, crosses below the zero
// 	line indicate selling pressure.

// 	This script generates a long entry signal when the Coppock value crosses over 
// 	a signal line, and/or generates a short entry signal when the value crosses
// 	under a signal line.

// 	Also it generates a long exit signal when the Coppock value crosses under
// 	a signal line, and/or generates a short exit signal when the value crosses
// 	over a signal line.

//  Signals can be filtered out by volatility, volume or both. To minimize 
//  repainting use higher percentage values of Time Threshold parameter.

//-------------------- Inputs	

ptype     = input('Close',     'Price Type',                    options=['Open','High','Low','Close','HL2','OC2','OHL3','HLC3','OHLC4'])
shortlag  = input(11,          'Short Lag |1..n|',              minval=1)  // 14, 20
longlag   = input(22,          'Long Lag |1..n|',               minval=1)  // 28, 40
wmalag    = input(2,           'WMA Lag |1..n|',                minval=1)  // 8, 10
method    = input('Trigger',   'Method',                        options=['Center','Trigger'])
triglag   = input(5,           'Trigger Lag',                   minval=1)
ftype     = input('Volatility','Filtering by',                  options=['Volatility','Volume','Both','None'])
tthres    = input(0.01,        'Time Threshold (%) |0.0..1.0|', minval=0.0, maxval=1.0, step=0.01)
holding_p = input(5,           'Holding Period |1..n|',         minval=1)

//-------------------- System Variables

var int BUY  =  1
var int SELL = -1
var int HOLD =  0

//-------------------- Series

var bool  long    = na
var bool  short   = na
var int   signal  = HOLD
var float trigger = 0.0
var float copzz   = ohlc4
var int   hp_counter = 0

//-------------------- Custom Functions	

coppock(ds, lag, short, long) => s = roc(ds, short), l = roc(ds, long), wma(s + l, lag)

volumeBreak(thres) =>  
    rsivol   = rsi(volume, 14)  
    osc      = hma(rsivol, 10)  
    osc > thres                     

volatilityBreak(volmin, volmax) => atr(volmin) > atr(volmax)

//-------------------- Logic

tbase   = (time - time[1]) / 1000
tcurr   = (timenow - time_close[1]) / 1000
barlife = tcurr / tbase

base =  ptype=='Open'  ? open 
      : ptype=='High'  ? high
      : ptype=='Low'   ? low
      : ptype=='Close' ? close
      : ptype=='OC2'   ? (open+close)/2 
      : ptype=='HL2'   ? hl2 
      : ptype=='OHL3'  ? (open+high+low)/3 
      : ptype=='HLC3'  ? hlc3 
      :                  ohlc4

filter =   ftype=='Volatility' ? volatilityBreak(1, 10) 
         : ftype=='Volume'     ? volumeBreak(49) 
         : ftype=='Both'       ? volatilityBreak(1, 10) and volumeBreak(49)
         :                       true

//-- Core
cop = coppock(base, wmalag, shortlag, longlag)

if method=='Center'
	long    := crossover(cop,  HOLD) 
	short   := crossunder(cop, HOLD) 
if method=='Trigger'
    trigger := sma(cop, triglag)
    long  := crossover(cop,  trigger) 
    short := crossunder(cop, trigger) 

signal := long and filter ? BUY : short and filter ? SELL : nz(signal[1])
copzz  := long and filter ? low : short and filter ? high : nz(copzz[1])

changed = change(signal)
hp_counter := changed ? 0 : hp_counter + 1
//--

startLongTrade  = barlife > tthres and changed and signal==BUY    
startShortTrade = barlife > tthres and changed and signal==SELL   
endLongTrade    = (changed and signal==SELL) or (signal==BUY  and hp_counter==holding_p and not changed) 
endShortTrade   = (changed and signal==BUY)  or (signal==SELL and hp_counter==holding_p and not changed) 

//-------------------- Visualization	

plot(copzz, "C-Curve", cop > cop[1] ? color.blue : color.red, 2, transp=0)

plotshape(startLongTrade  ? copzz : na, 'Buy',  shape.labelup,   location.absolute, color.blue, text='c', size=size.tiny) 
plotshape(startShortTrade ? copzz : na, 'Sell', shape.labeldown, location.absolute, color.red,  text='c', size=size.tiny) 
plot(endLongTrade         ? ohlc4   : na, 'StopBuy',  color.blue, 2, plot.style_cross)
plot(endShortTrade        ? ohlc4   : na, 'StopSell', color.red,  2, plot.style_cross)

//-------------------- Notification

if changed and signal==BUY 
    alert('Buy Alert', alert.freq_once_per_bar)  // alert.freq_once_per_bar_close
if changed and signal==SELL 
    alert('Sell Alert', alert.freq_once_per_bar)
    
alertcondition(startLongTrade,  'Buy Alert',  'Go Long!')
alertcondition(startShortTrade, 'Sell Alert', 'Go Short!')

//-------------------- Backtest

show_info = input(false, '===Information===')
lot_size  = input(0.01,  'Lot Size', options=[0.01,0.1,0.2,0.3,0.5,1,2,3,5,10,20,30,50,100,1000]) 
ubase     = input(false, 'Use Base Price?')

bidask = ubase ? base : open 

var float start_long_trade  = bidask  
var float long_trades       = 0.
var float start_short_trade = bidask  
var float short_trades      = 0.
var int   wins              = 0
var int   trade_count       = 0

if startLongTrade 
    start_long_trade := bidask 
if endLongTrade
    ldiff         = (bidask - start_long_trade)
    wins         := ldiff > 0 ? 1 : 0
    long_trades  := ldiff * lot_size   
    trade_count  := 1
if startShortTrade 
    start_short_trade := bidask
if endShortTrade
    sdiff         = (start_short_trade - bidask)
    wins         := sdiff > 0 ? 1 : 0
    short_trades := sdiff * lot_size 
    trade_count  := 1
    
cumreturn   = cum(long_trades) + cum(short_trades)  //-- cumulative return 
totaltrades = cum(trade_count)
totalwins   = cum(wins)  
totallosses = totaltrades - totalwins == 0 ? 1 : totaltrades - totalwins

//------------------- Information

var label lbl = na

info =  ptype
      + '\nCR='        + tostring(cumreturn,             '#.#') 
      + '\nTrades: '   + tostring(totaltrades,           '#')
      + '\nWin/Loss: ' + tostring(totalwins/totallosses, '#.##') 
      + '\nWinrate: '  + tostring(totalwins/totaltrades, '#.#%')       
      + '\nBar Time: ' + tostring(barlife,               '#.#%')

if show_info and barstate.islast  
    lbl := label.new(bar_index, ohlc4, info, xloc.bar_index, yloc.price, 
                     color.new(color.blue, 100), label.style_label_left, color.black, size.small, text.align_left)
    label.delete(lbl[1])
