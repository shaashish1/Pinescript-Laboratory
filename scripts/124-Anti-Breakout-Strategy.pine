// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © capissimo

//@version=4
study('Anti-Breakout Strategy', '', true)

// Anti-Breakout Strategy

// Description:

// This is a contrarian entry strategy for trading false breakouts. 
// The high/low of the breakout bar is used for the entry in the 
// opposite direction.

// To reduce repainting set ptype variable to OHL3.

//-------------------- Inputs

ptype     = input('Close',     'Price Type',                   options=['Open','High','Low','Close','HL2','OC2','OHL3','HLC3','OHLC4'])
lag       = input(3,           'Lag |1..n|',                   minval=1)
tthres    = input(1,           'Time Threshold (%) |0..100|',  minval=0, maxval=100) / 100
ftype     = input('Volume',    'Filter Signals by',            options=['Volatility','Volume','Both','None'])
minvol    = input(1,           'Min ATR Lag |1..n|',           minval=1)
maxvol    = input(2,           'Max ATR Lag |1..n|',           minval=1)
volbr     = input(49,          'Volume Level|1..n|',           minval=1)  // 49, 55
holding_p = input(1,           'Holding Period |1..n|',        minval=1)
draw      = input(true,        'Draw Channel?')

//-------------------- System Variables

var int BUY   = -1
var int SELL  =  1
var int HOLD  =  0

//-------------------- Helper Series

var float hHigh      = 0.0
var float lLow       = 0.0
var float barHigh    = 0.0
var float barLow     = 0.0

var int   signal     = HOLD
var int   hp_counter = 0     //-- holding period counter

//-------------------- Custom Functions

volumeBreak(thres) => hma(rsi(volume, 14), 10) > thres

volatilityBreak(volmin, volmax) => atr(volmin) > atr(volmax)

//-------------------- Logic

float tbase   = (time - time[1]) / 1000
float tcurr   = (timenow - time_close[1]) / 1000
float barlife = tcurr / tbase

float ds      =  ptype=='Open'  ? open 
               : ptype=='High'  ? high 
               : ptype=='Low'   ? low 
               : ptype=='Close' ? close 
               : ptype=='OC2'   ? (open+close)/2 
               : ptype=='HL2'   ? hl2 
               : ptype=='OHL3'  ? (open+high+low)/3 
               : ptype=='HLC3'  ? hlc3 
               :                  ohlc4
           
bool filter   =  ftype=='Volatility' ? volatilityBreak(minvol, maxvol) 
               : ftype=='Volume'     ? volumeBreak(volbr) 
               : ftype=='Both'       ? volatilityBreak(minvol, maxvol) and volumeBreak(volbr)
               :                       true

//== Core
hHigh := highest(high[1], lag)
lLow  := lowest(low[1], lag)

bool long  = crossover(ds, hHigh)
bool short = crossunder(ds, lLow)

if long
	barLow := low

if short
	barHigh := high
//==

signal := long and filter ? BUY : short and filter ? SELL : nz(signal[1])

bool changed = change(signal)
hp_counter := changed ? 0 : hp_counter + 1

bool startLongTrade  = barlife > tthres and changed and signal==BUY    
bool startShortTrade = barlife > tthres and changed and signal==SELL   
bool endLongTrade    = ((not changed) and signal==BUY  and hp_counter==holding_p) or (changed and signal==SELL)  
bool endShortTrade   = ((not changed) and signal==SELL and hp_counter==holding_p) or (changed and signal==BUY)

//-------------------- Visualization

plot(draw ? hHigh : na, '', color.silver, 2)
plot(draw ? lLow  : na, '', color.silver, 2)

plotshape(startLongTrade  ? low   : na, 'Buy',  shape.labelup,   location.belowbar, color.blue, 30, size=size.small)
plotshape(startShortTrade ? high  : na, 'Sell', shape.labeldown, location.abovebar, color.red,  30, size=size.small)
plot(endLongTrade         ? ohlc4 : na, '', color.blue, 1, plot.style_cross)
plot(endShortTrade        ? ohlc4 : na, '', color.red,  1, plot.style_cross)

//==================== Doji Module

var string stop = '✖'

bool doji = (abs(open - close) <= (high - low) * input(0.15, "Doji Size", minval=0.01, step=.01))

plotchar((open-close)<0 ? doji : na, '', stop, location.abovebar, color.black) 
plotchar((open-close)>0 ? doji : na, '', stop, location.belowbar, color.black) 

//-------------------- Notification

if changed and signal==BUY 
    alert("Buy Alert", alert.freq_once_per_bar)  // alert.freq_once_per_bar_close
if changed and signal==SELL 
    alert("Sell Alert", alert.freq_once_per_bar)
    
//-------------------- Backtest

show_info = input(true,  'Performance')
lot_size  = input(0.01,  'Lot Size', options=[0.01,0.1,0.2,0.3,0.5,1,2,3,5,10,20,30,50,100,1000]) 
ubase     = input(false, 'Use Base Price?')

float bidask  = ubase ? (open+high+low)/3 : open

var float start_long_trade  = bidask  
var float long_trades       = 0.
var float start_short_trade = bidask  
var float short_trades      = 0.
var int   wins              = 0
var int   trade_count       = 0

if startLongTrade 
    start_long_trade := bidask 
if endLongTrade
    ldiff         = (bidask - start_long_trade)
    wins         := ldiff > 0 ? 1 : 0
    long_trades  := ldiff * lot_size   
    trade_count  := 1
if startShortTrade 
    start_short_trade := bidask
if endShortTrade
    sdiff         = (start_short_trade - bidask)
    wins         := sdiff > 0 ? 1 : 0
    short_trades := sdiff * lot_size 
    trade_count  := 1
    
cumreturn   = cum(long_trades) + cum(short_trades)  //-- cumulative return 
totaltrades = cum(trade_count)
totalwins   = cum(wins)  
totallosses = totaltrades - totalwins == 0 ? 1 : totaltrades - totalwins

//------------------- Information

var label lbl = na

info =  'CR='          + tostring(cumreturn,             '#.#') 
      + '\nTrades: '   + tostring(totaltrades,           '#')
      + '\nWin/Loss: ' + tostring(totalwins/totallosses, '#.##') 
      + '\nWinrate: '  + tostring(totalwins/totaltrades, '#.#%')       
      + '\nBar Time: ' + tostring(barlife,               '#.#%')

if show_info and barstate.islast  
    lbl := label.new(bar_index, ohlc4, info, xloc.bar_index, yloc.price, 
                     color.new(color.blue, 100), label.style_label_left, color.black, size.small, text.align_left)
    label.delete(lbl[1])
