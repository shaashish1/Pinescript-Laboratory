// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© capissimo

//@version=5
indicator("Bollinger Bands Signals", 'BBS', true, timeframe="", timeframe_gaps=true)

// Description:
// This script is pritty obvious.
// It uses a standard technical analysis indicator - Bollinger Bands - and
// appends it with a width parameter and a signal generation procedure.
// The BB width is used as a filter.

//-- Inputs

Data   = input.source(close,  "Dataset")
Period = input.int   (20,     'Period [1..n]', 1)
Mult   = input.float (2.0,    'Deviation [0.001..50]', minval=0.001, maxval=50, step=0.001)
Width  = input.float (0.0019, 'Bands Width [0.0001..0.1]',  minval=0.0001, maxval=0.1, step=0.0001)
Offset = input.int   (0,      "Offset [-500..+500]", -500, 500)

//-- Constants

type SignalType    // enum
    int BUY   = 1
    int SELL  =-1
    int CLEAR = 0

//-- Variables

var SignalType stype  = SignalType.new()
var int  signal = stype.CLEAR

//-- Logic

float basis = ta.sma(Data, Period)
float dev   = Mult * ta.stdev(Data, Period)
float upper = basis + dev
float lower = basis - dev
float width = (upper-lower)/basis

// signal generation procedure
bool long  = (close>basis or close>lower) and width>Width  
bool short = (close<basis or close<upper) and width>Width   

// assemble a signal
signal := long  ? stype.BUY  : 
          short ? stype.SELL : 
          nz(signal[1])

int  changed         = ta.change(signal) 
bool long_condition  = changed and signal==stype.BUY  
bool short_condition = changed and signal==stype.SELL

//-- Visuals

plot(basis,      "Basis", color=#FF6D00, offset=Offset)
p1 = plot(upper, "Upper", color=#2962FF, offset=Offset)
p2 = plot(lower, "Lower", color=#2962FF, offset=Offset)
fill(p1, p2, color.rgb(33, 150, 243, 95), "Background")
plotshape(long_condition,  '', shape.labelup,   location.belowbar, color.green, size=size.tiny)
plotshape(short_condition, '', shape.labeldown, location.abovebar, color.red,   size=size.tiny)

//-- Notification

alertcondition(long_condition,  'Go long',  'Upturn!')
alertcondition(short_condition, 'Go short', 'Downturn!')
alertcondition(long_condition or short_condition, 'Reversal', 'Time to ACT!')
